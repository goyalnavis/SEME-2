import java.util.*;

class Node {
	protected int regd;
	protected float mark;
	protected node next;
	protected node prev;
	
	public Node(int regd, float mark) {
		this.regd=regd;
		this.mark=mark;
		this.next=null;
		this.prev=null;
	}
}
public class doublelinkedlist {
	  
	//create
	public static node create(node start,node end) {
		Scanner sc=new Scanner (System.in);
		System.out.println("Enter the regd number:");
		int regd =sc.nextInt();
		System.out.println("Enter the mark");
		float mark=sc.nextFloat();
		node p=new node(regd , mark);
		
		if (start == null && end == null) {
			start =  p;
		end = p		}
		else {
			end.next=p;
			p.prev = end;
			end = p;
		}
		return p;
	}
	
	//insert at the beginning
	public static node insBeg(node start ,node end) {
		node p = create(start,end);
		p.next = start;
		start.prev = p;
		start = p;
		return start;
	}

	// insert at the end
	public static node insEnd(node start, node end) {
		return create(start , end);
	}
	
	//insert at any position
	public static node insAny(node start , node end) {
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the position to insert");
		int pos = sc.nextInt();
		if(pos == 1) {
			return insBeg(start,end);
		}
		node current = start;
		for(int i=1;i< pos-1 && current != null; i++) {
			current =current.next;
		}
		if (current == null) {
			System.out.println("Invalid position");
			return start;
		}
		node p =create(start , end);
		p.next = current.next;
		p.prev = current;
		if (current.next != null) {
			current.next.prev = p;
		}
		else {
			end = p;
		}
		current.next = p;
		return start;
	}
	 
	//delete from begin
	public static node delBeg(node start , node end) {
		if(start == end) {
			end= null;
		}
		else {
			start.next.prev = null;		
		}
		start = start.next;
		return start;
	}
	
	// delete form end
	public static node delEnd(node start, node end) {
		if(end == null) {
			System.out.println("List is empty");
	        return start;
		}
		if(start == end) {
			start = null;
		}
		else {
			end.prev.next=null;
		}
		end = end.prev;
		return start;
	}
	
	//delete from any position
	public static node delAny(node start , node end) {
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the registration number to be delete");
		int regd = sc.nextInt();
		node current = start;
		while (current != null) {
			if (current.regd == regd) {
				if(current == start) {
					start = delBeg(start,end);
				}
				else if(current == end) {
					start = delEnd(start,end);
				}
				else { 
					current.prev.next=current.next;
					current.next.prev=current.next;
				}
				return start;
			}
			current = current.next;
		}
		System.out.println("Registratin number not found");
		return start;  
	}
	
	//display
	public static void display(node start) {
		System.out.println("List of student: ");
		while (start != null) {
			System.out.println("Registration number: "+start.regd+ " mark: "+start.mark);
		    start = start.next;
		}
	}
	
	//mai method
	public static void main(String args[]) {
		node start = null;
		node end= null;
		Scanner sc=new Scanner(System.in);
		int choice;
		do {
			System.out.println("\n1.Insert at beginning\n2. Insert at end\n3. Insert at any position\n4. Delete from beginning\n5. Delete any registration number\n7. Display List\n0. Exit");
			switch(choice) {
			case 1:
				start = insBeg(start,end);
				break;
			case 2:
				start = insEnd(start,end);
				break;
			case 3:
				start = insAny(start,end);
				break;
			case 4:
				start = delBeg(start,end);
				break;
			case 5:
				start = delEnd(start, end);
				break;
			case 6:
				start = delAny(start,end);
			case 7:
				display(start);
				break;
			case 0:
				System.out.println("Exiting...");
				default:
					System.out.println("Invalid choice")
			}
			
		}
		while(choice != 0);
	}
}
